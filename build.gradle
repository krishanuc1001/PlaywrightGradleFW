plugins {
    id 'java'
    id 'io.freefair.lombok' version "${lombokPluginVersion}"
    id "io.qameta.allure" version "${allureVersion}"
}

defaultTasks 'clean', 'test', 'aggregate'

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.microsoft.playwright:playwright:${playwrightVersion}"
    implementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    implementation "io.github.bonigarcia:webdrivermanager:${webdrivermanagerVersion}"
    implementation "org.jetbrains:annotations:${annotationsVersion}"
    implementation "joda-time:joda-time:${jodaTimeVersion}"
    implementation "org.apache.commons:commons-lang3:${commonslang3Version}"
    implementation "org.apache.poi:poi:${poiVersion}"
    implementation "org.apache.poi:poi-ooxml:${poiVersion}"
    implementation "org.apache.poi:poi-ooxml-lite:${poOoxlSchemasVersion}"
    implementation "org.apache.xmlbeans:xmlbeans:${xmlBeansVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.aventstack:extentreports:${extentReportsVersion}"
    implementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    implementation "org.json:json:${jsonVersion}"
    implementation "com.amazonaws:aws-java-sdk-secretsmanager:${awsJavaSdkVerion}"
    implementation "org.springframework.amqp:spring-rabbit:${springRabbitVersion}"
    implementation "org.postgresql:postgresql:${postgresqlJDBCVerion}"
    implementation "com.browserstack:browserstack-local-java:${browserstackLocalVersion}"
    implementation "com.deque:axe-selenium:${axeVersion}"
    implementation "io.qameta.allure:allure-testng:${allureTestNgVersion}"
    implementation "org.testng:testng:${testNGVersion}"

    testImplementation "org.assertj:assertj-joda-time:${assertjJodatimeVersion}"
    testImplementation "org.assertj:assertj-core:${assertjcoreVersion}"

    testRuntimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    testRuntimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
}

test { //this is the gradle task to be executed
    useTestNG() { //Tells Gradle to use TestNG

        listeners << 'com.testUtilities.listeners.ExtentReportListener'
        listeners << 'com.testUtilities.listeners.AllureReportListener'
        listeners << 'com.testUtilities.listeners.AnnotationTransformer'

        if (project.hasProperty('groups')) {
            includeGroups((String) project.findProperty('groups'))
            excludeGroups 'flaky', 'oos'
        }

        options {
            setParallel('methods')
            setThreadCount(3)
        }

        suites 'src/test/resources/testRunners/testng.xml'
        //  includeGroups 'test', 'sanity'
        //  excludeGroups 'requests'

        //set TestNG output dir
        outputDirectory = file("$projectDir/testNGOutput")

    }

    //To display the following test events
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }

    finalizedBy {
        allureReport
    }
}

/**
 * Note: The below command would open the Allure report for the current test
 * execution in the system default browser.
 * Comment/ uncomment as per requirement when running locally.
 */
allureReport {
    finalizedBy {
        allureServe
    }
}
